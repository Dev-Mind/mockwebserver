buildscript {
    ext {
        junitPlatformVersion = '1.0.2'
        junitVersion = '5.0.2'
        okHttpVersion = '3.9.1'
        bouncycastleVersion = '1.59'
    }
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath("org.junit.platform:junit-platform-gradle-plugin:${junitPlatformVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'signing'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'maven'

group = 'fr.dev-mind'
archivesBaseName = "mockwebserver"
version = rootProject.version
sourceCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    compile('org.apiguardian:apiguardian-api:1.0.0')
    compile("com.squareup.okhttp3:okhttp:${okHttpVersion}")
    compile("com.squareup.okhttp3:okhttp-testing-support:${okHttpVersion}")
    compile("org.bouncycastle:bcpkix-jdk15on:${bouncycastleVersion}")
    compile("org.junit.jupiter:junit-jupiter-api:${junitVersion}")

    testCompile("org.assertj:assertj-core:3.8.0")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
}

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")
ext.ossrhUsername = hasProperty('ossrhUsername') ? ossrhUsername : ""
ext.ossrhPassword = hasProperty('ossrhPassword') ? ossrhPassword : ""

ext.sharedManifest = manifest {
    attributes(
            "Implementation-Title": project.name,
            "Implementation-Version": version,
            "Implementation-Vendor": project.group,
            "Bundle-Vendor": project.group
    )
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    manifest {
        from sharedManifest
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc
    manifest {
        from sharedManifest
    }
}

javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.compile
    options.linkSource true
    options.addBooleanOption('Xdoclint:all,-missing', true)
}

jar {
    manifest {
        from sharedManifest
    }
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name project.name
                packaging 'jar'
                // optionally artifactId can be defined here
                description "A scriptable web server for testing HTTP clients"
                url 'https://github.com/Dev-Mind/mockwebserver'

                scm {
                    connection 'scm:git:git://github.com/Dev-Mind/mockwebserver'
                    developerConnection 'scm:git:git://github.com/Dev-Mind/mockwebserver'
                    url 'https://github.com/Dev-Mind/mockwebserver'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'javamind'
                        name 'Guillaume EHRET'
                        email 'guillaume@dev-mind.fr'
                    }
                }
            }
        }
    }
}

//afterReleaseBuild.dependsOn uploadArchives